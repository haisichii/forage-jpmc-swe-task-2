From f7045a8ea0a3044976b8143e2fae080e4ce130f3 Mon Sep 17 00:00:00 2001
From: raqeeb <haise2612@gmail.com>
Date: Fri, 30 Aug 2024 23:42:43 +0100
Subject: [PATCH] edis made

---
 src/App.tsx   | 33 +++++++++++++++++++++++++++------
 src/Graph.tsx | 18 ++++++++++++++++--
 2 files changed, 43 insertions(+), 8 deletions(-)

diff --git a/src/App.tsx b/src/App.tsx
index 0728518..a00b536 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -2,12 +2,15 @@ import React, { Component } from 'react';
 import DataStreamer, { ServerRespond } from './DataStreamer';
 import Graph from './Graph';
 import './App.css';
+import { triggerAsyncId } from 'async_hooks';
 
 /**
  * State declaration for <App />
  */
 interface IState {
   data: ServerRespond[],
+  
+  showGraph: boolean, //graph is either true or false (show or hidden)
 }
 
 /**
@@ -22,6 +25,7 @@ class App extends Component<{}, IState> {
       // data saves the server responds.
       // We use this state to parse data down to the child element (Graph) as element property
       data: [],
+      showGraph: false, //by default, we hide the graph.
     };
   }
 
@@ -29,18 +33,35 @@ class App extends Component<{}, IState> {
    * Render Graph react component with state.data parse as property data
    */
   renderGraph() {
-    return (<Graph data={this.state.data}/>)
+    //set condition to render graph IF showGraph is True!
+    if (this.state.showGraph) {
+      return (<Graph data={this.state.data}/>)
+    }
+    
   }
 
   /**
    * Get new data from server and update the state with the new data
    */
   getDataFromServer() {
-    DataStreamer.getData((serverResponds: ServerRespond[]) => {
-      // Update the state by creating a new array of data that consists of
-      // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
-    });
+    let x = 0; //used to track how many times data is fetched.
+
+    const interval = setInterval( () => { // () => { }  anon function, used with setinterval i.e repeat block of code x times
+      
+      DataStreamer.getData((serverResponds: ServerRespond[]) => { //this function actually gets data from server. serverresponds is an array of responses
+        //underneath, we update the state of the component. responses from 'serverresponds' are saved to data, and showgraph is true ready to display.
+        this.setState({
+          data: serverResponds,
+          showGraph: true,
+        });
+
+      });
+      //still within the setinterval function, we increment our counter after we did all of that.
+      x++
+      if (x > 1000){ //here we check if we have exceeded 1000 increments to then stop the interval i.e stop fetchinf data. 1001 requests are made.
+        clearInterval(interval);
+      }
+    }, 100); //runs every 100 milliseconds
   }
 
   /**
diff --git a/src/Graph.tsx b/src/Graph.tsx
index 3b2a7da..4f37943 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -14,7 +14,8 @@ interface IProps {
  * Perspective library adds load to HTMLElement prototype.
  * This interface acts as a wrapper for Typescript compiler.
  */
-interface PerspectiveViewerElement {
+//we want this to behave like a html element.
+interface PerspectiveViewerElement extends HTMLElement {
   load: (table: Table) => void,
 }
 
@@ -32,7 +33,7 @@ class Graph extends Component<IProps, {}> {
 
   componentDidMount() {
     // Get element to attach the table from the DOM.
-    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+    const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
 
     const schema = {
       stock: 'string',
@@ -48,7 +49,20 @@ class Graph extends Component<IProps, {}> {
       // Load the `table` in the `<perspective-viewer>` DOM reference.
 
       // Add more Perspective configurations here.
+      elem.setAttribute('view', 'y_line'); //view is type of graph, we are using y-lines
+      elem.setAttribute('column-pivots', '["stock"]'); //column pivots are the lines which are stocks
+      elem.setAttribute('row-pivots', '["timestamp"]'); //row-pivots is for x axis and matches datapoints with times
+      elem.setAttribute('columns', '["top_ask_price"]'); //lets us view in detail top ask price at any given column in graph.
+      
+      //this takes care of similiar datapoints and aggregates them.
+      elem.setAttribute('aggregates',`
+        {"stock":"distinct count",
+          "top_ask_price":"avg",
+          "top_bid_price":"avg",
+          "timestamp":"distinct count"}`);
+
       elem.load(this.table);
+
     }
   }
 
-- 
2.33.0.windows.2

